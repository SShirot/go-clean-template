// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/evrone/go-clean-template/config"
	"github.com/evrone/go-clean-template/internal/di"
	"github.com/evrone/go-clean-template/internal/di/providers"
)

// Injectors from app.go:

// InitializeApp creates a new App instance with all dependencies injected
func InitializeApp(cfg *config.Config) (*App, error) {
	loggerInterface := providers.NewLogger(cfg)
	postgresInterface, err := providers.NewPostgres(cfg, loggerInterface)
	if err != nil {
		return nil, err
	}
	httpServerInterface := providers.NewHTTPServer(cfg, loggerInterface)
	grpcServerInterface := providers.NewGRPCServer(cfg, loggerInterface)
	translationRepoInterface := providers.NewTranslationRepo(postgresInterface)
	translationServiceInterface := providers.NewTranslationService(translationRepoInterface)
	app := &App{
		Logger:        loggerInterface,
		Postgres:      postgresInterface,
		HTTPServer:    httpServerInterface,
		GRPCServer:    grpcServerInterface,
		TranslationUC: translationServiceInterface,
	}
	return app, nil
}

// app.go:

// App is the main application struct
type App struct {
	Logger        di.LoggerInterface
	Postgres      di.PostgresInterface
	HTTPServer    di.HTTPServerInterface
	GRPCServer    di.GRPCServerInterface
	TranslationUC di.TranslationServiceInterface
}
